import { test } from '@playwright/test'

// Skeleton spec generated by Planner for Tasks MVP stories (TDA-001..004).
// Marked as skipped until QA implements executable steps.
test.describe.skip('[Skeleton] Tasks MVP acceptance', () => {
  test('[AC: TDA-001-AC1] 正常系 POST /api/tasks trims title and returns task meta', async ({ page, request, baseURL }) => {
    // Preconditions:
    // - Task store is reset (use resetTasks helper against `${baseURL}/api/dev/reset`).
    // Steps:
    // 1. Navigate to `${baseURL}/`.
    // 2. Intercept POST `/api/tasks` and submit `{ title: "  Sample Task  " }` via UI form.
    // 3. Await 201 response and capture payload.
    // Expected:
    // - Response JSON includes `id` (string), `title === "Sample Task"`, `done === false`, ISO8601 `createdAt`.
    // - UI list `[role=list][aria-label="tasks"]` prepends unchecked item with matching title.
  })

  test('[AC: TDA-001-AC2] 異常系 タイトル空白で 400 TITLE_REQUIRED', async ({ request, baseURL }) => {
    // Preconditions:
    // - Task store remains reset.
    // Steps:
    // 1. Issue POST `/api/tasks` with `{ title: "   " }` using Playwright request fixture.
    // Expected:
    // - Response status 400 with body `{ "error": "TITLE_REQUIRED" }`.
    // - Follow-up GET `/api/tasks` confirms list still empty.
  })

  test('[AC: TDA-001-AC3] UI lists new task at top unchecked', async ({ page, request, baseURL }) => {
    // Preconditions:
    // - Task store reset, use API POST to seed one item prior to visit.
    // Steps:
    // 1. POST `/api/tasks` with `{ title: "From API" }` and note returned id.
    // 2. Navigate to `${baseURL}/`.
    // Expected:
    // - First list item matches seeded title, checkbox `aria-checked="false"`.
    // - Timestamp renders (non-empty) within same row.
  })

  test('[AC: TDA-002-AC1] GET /api/tasks returns complete task array', async ({ request, baseURL }) => {
    // Preconditions:
    // - Seed two tasks via POST to ensure variety of done flags.
    // Steps:
    // 1. Call GET `/api/tasks`.
    // Expected:
    // - Response 200 with array of tasks each containing `id`, `title`, `done`, `createdAt` (string).
  })

  test('[AC: TDA-002-AC2] UI renders tasks ordered by createdAt desc', async ({ page, request, baseURL }) => {
    // Preconditions:
    // - Create two tasks sequentially via API (note second should appear first).
    // Steps:
    // 1. Visit `${baseURL}/` after seeding.
    // Expected:
    // - Task titles appear sorted newest-first within `[role=list][aria-label="tasks"]`.
    // - Row structure remains stable with checkbox + delete button per entry.
  })

  test('[AC: TDA-002-AC3] UI empty state message when no tasks', async ({ page, request, baseURL }) => {
    // Preconditions:
    // - Ensure store is empty.
    // Steps:
    // 1. Visit `${baseURL}/`.
    // Expected:
    // - List has zero children.
    // - Empty state element `data-testid="empty-tasks"` is visible and accessible (`role=status`).
  })

  test('[AC: TDA-003-AC1] PATCH /api/tasks/:id toggles done flag', async ({ request, baseURL }) => {
    // Preconditions:
    // - Seed a task and capture id.
    // Steps:
    // 1. PATCH `/api/tasks/{id}` with `{ done: true }`.
    // 2. PATCH again with `{ done: false }`.
    // Expected:
    // - Both responses 200 with updated `done` reflecting payload.
    // - GET confirms persisted value.
  })

  test('[AC: TDA-003-AC2] PATCH validation requires boolean done', async ({ request, baseURL }) => {
    // Preconditions:
    // - Task store seeded with one item.
    // Steps:
    // 1. PATCH `/api/tasks/{id}` with `{ done: "yes" }`.
    // Expected:
    // - Response 400 `{ "error": "DONE_REQUIRED" }`.
  })

  test('[AC: TDA-003-AC3] UI checkbox toggles without reload', async ({ page, request, baseURL }) => {
    // Preconditions:
    // - Seed a task with `done=false`.
    // Steps:
    // 1. Visit `${baseURL}/`.
    // 2. Click checkbox button within first list item.
    // Expected:
    // - Checkbox reflects `aria-checked="true"` immediately with no full-page navigation.
    // - Optional: verify API persisted change via follow-up GET.
  })

  test('[AC: TDA-003-AC4] PATCH non-existent task yields 404 TASK_NOT_FOUND', async ({ request, baseURL }) => {
    // Preconditions:
    // - Use synthetic id (e.g., uuid) not present in store.
    // Steps:
    // 1. PATCH `/api/tasks/{unknown}` with `{ done: true }`.
    // Expected:
    // - Response status 404 `{ "error": "TASK_NOT_FOUND" }`.
  })

  test('[AC: TDA-004-AC1] DELETE removes existing task and suppresses in list', async ({ request, baseURL }) => {
    // Preconditions:
    // - Seed two tasks and capture ids.
    // Steps:
    // 1. DELETE `/api/tasks/{id}` for one task.
    // Expected:
    // - Response 200 `{ ok: true }`.
    // - Subsequent GET shows id removed, other task remains.
  })

  test('[AC: TDA-004-AC2] UI delete button removes row without reload', async ({ page, request, baseURL }) => {
    // Preconditions:
    // - Seed at least one task.
    // Steps:
    // 1. Visit `${baseURL}/`.
    // 2. Activate `data-testid="delete-task"` button for seeded task.
    // Expected:
    // - Corresponding list item disappears while others persist.
    // - No full page refresh occurs (can compare page.url before/after).
  })

  test('[AC: TDA-004-AC3] DELETE non-existent task returns 404 TASK_NOT_FOUND', async ({ request, baseURL }) => {
    // Preconditions:
    // - No task with chosen id exists.
    // Steps:
    // 1. DELETE `/api/tasks/{unknown}`.
    // Expected:
    // - Response 404 `{ "error": "TASK_NOT_FOUND" }`.
  })
})
